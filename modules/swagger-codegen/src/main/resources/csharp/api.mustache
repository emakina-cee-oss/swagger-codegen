using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using RestSharp;
using {{invokerPackage}};
using {{modelPackage}};
{{#imports}}
{{/imports}}

namespace {{package}} {
  {{#operations}}

  public interface I{{classname}} : IApiInjector  {
    {{#operation}}
    /// <summary>
    /// {{summary}} {{notes}}
    /// </summary>
    {{#allParams}}/// <param name="{{paramName}}">{{description}}</param>{{/allParams}}
    /// <returns>{{#returnType}}{{{returnType}}}{{/returnType}}</returns>
    {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}} {{nickname}} ({{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});

    /// <summary>
    /// {{summary}} {{notes}}
    /// </summary>
    {{#allParams}}/// <param name="{{paramName}}">{{description}}</param>{{/allParams}}
    /// <returns>{{#returnType}}{{{returnType}}}{{/returnType}}</returns>
    {{#returnType}}Task<{{{returnType}}}>{{/returnType}}{{^returnType}}Task{{/returnType}} {{nickname}}Async ({{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}});
    {{/operation}}
  }

  /// <summary>
  /// Represents a collection of functions to interact with the API endpoints
  /// </summary>
  public class {{classname}} : BaseApi, I{{classname}} {

    /// <summary>
    /// Initializes a new instance of the <see cref="{{classname}}"/> class.
    /// </summary>
    /// <returns></returns>
    public {{classname}}(String basePath) : base(basePath) { }

    {{#operation}}
    /// <summary>
    /// {{summary}} {{notes}}
    /// </summary>
    {{#allParams}}/// <param name="{{paramName}}">{{description}}</param>{{/allParams}}
    /// <returns>{{#returnType}}{{{returnType}}}{{/returnType}}</returns>
    public {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}} {{nickname}} ({{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) {

    {{#allParams}}{{#required}}
        // verify the required parameter '{{paramName}}' is set
        if ({{paramName}} == null) throw new ApiException(400, "Missing required parameter '{{paramName}}' when calling {{nickname}}");
    {{/required}}{{/allParams}}

    var path = "{{path}}";
    path = path.Replace("{format}", "json");
    {{#pathParams}}path = path.Replace("{" + "{{baseName}}" + "}", apiClient.ParameterToString({{{paramName}}}));
    {{/pathParams}}

    var queryParams = new Dictionary<String, String>();
    var headerParams = new Dictionary<String, String>();
    var formParams = new Dictionary<String, String>();
    var fileParams = new Dictionary<String, String>();
    String postBody = null;

    {{#queryParams}} if ({{paramName}} != null) queryParams.Add("{{baseName}}", apiClient.ParameterToString({{paramName}})); // query parameter
    {{/queryParams}}
    {{#headerParams}} if ({{paramName}} != null) headerParams.Add("{{baseName}}", apiClient.ParameterToString({{paramName}})); // header parameter
    {{/headerParams}}
    {{#formParams}}if ({{paramName}} != null) {{#isFile}}fileParams.Add("{{baseName}}", {{paramName}});{{/isFile}}{{^isFile}}formParams.Add("{{baseName}}", apiClient.ParameterToString({{paramName}})); // form parameter{{/isFile}}
    {{/formParams}}
    {{#bodyParam}}postBody = apiClient.Serialize({{paramName}}); // http body (model) parameter
    {{/bodyParam}}

    // authentication setting, if any
    String[] authSettings = new String[] { {{#authMethods}}"{{name}}"{{#hasMore}}, {{/hasMore}}{{/authMethods}} };

        {{#returnType}}
        return ExecuteCall<{{{returnType}}}>(path, Method.{{httpMethod}}, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
        {{/returnType}}
        {{^returnType}}
        ExecuteCall<object>(path, Method.{{httpMethod}}, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
        {{/returnType}}
     }
	
	 /// <summary>
    /// {{summary}} {{notes}}
    /// </summary>
    {{#allParams}}/// <param name="{{paramName}}">{{description}}</param>{{/allParams}}
    /// <returns>{{#returnType}}{{{returnType}}}{{/returnType}}</returns>
    public async {{#returnType}}Task<{{{returnType}}}>{{/returnType}}{{^returnType}}Task{{/returnType}} {{nickname}}Async ({{#allParams}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) {

        {{#allParams}}{{#required}}
        // verify the required parameter '{{paramName}}' is set
        if ({{paramName}} == null) throw new ApiException(400, "Missing required parameter '{{paramName}}' when calling {{nickname}}");
        {{/required}}{{/allParams}}

        var path = "{{path}}";
        path = path.Replace("{format}", "json");
        {{#pathParams}}path = path.Replace("{" + "{{baseName}}" + "}", apiClient.ParameterToString({{{paramName}}}));
        {{/pathParams}}

        var queryParams = new Dictionary<String, String>();
        var headerParams = new Dictionary<String, String>();
        var formParams = new Dictionary<String, String>();
        var fileParams = new Dictionary<String, String>();
        String postBody = null;

        {{#queryParams}} if ({{paramName}} != null) queryParams.Add("{{baseName}}", apiClient.ParameterToString({{paramName}})); // query parameter
        {{/queryParams}}
        {{#headerParams}} if ({{paramName}} != null) headerParams.Add("{{baseName}}", apiClient.ParameterToString({{paramName}})); // header parameter
        {{/headerParams}}
        {{#formParams}}if ({{paramName}} != null) {{#isFile}}fileParams.Add("{{baseName}}", {{paramName}});{{/isFile}}{{^isFile}}formParams.Add("{{baseName}}", apiClient.ParameterToString({{paramName}})); // form parameter{{/isFile}}
        {{/formParams}}
        {{#bodyParam}}postBody = apiClient.Serialize({{paramName}}); // http body (model) parameter
        {{/bodyParam}}

        // authentication setting, if any
        String[] authSettings = new String[] { {{#authMethods}}"{{name}}"{{#hasMore}}, {{/hasMore}}{{/authMethods}} };
        {{#returnType}}
        return await ExecuteCallAsync<{{{returnType}}}>(path, Method.{{httpMethod}}, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
        {{/returnType}}
        {{^returnType}}
        await ExecuteCallAsync<object>(path, Method.{{httpMethod}}, queryParams, postBody, headerParams, formParams, fileParams, authSettings);
        {{/returnType}}

    }
    {{/operation}}
  }  
  {{/operations}}
}
